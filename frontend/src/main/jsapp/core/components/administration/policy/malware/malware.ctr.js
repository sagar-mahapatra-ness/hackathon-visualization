/*
 ShieldX Networks Inc. CONFIDENTIAL
 ----------------------------------
 *
 Copyright (c) 2016 ShieldX Networks Inc.
 All Rights Reserved.
 *
 NOTICE: All information contained herein is, and remains
 the property of ShieldX Networks Incorporated and its suppliers,
 if any. The intellectual and technical concepts contained
 herein are proprietary to ShieldX Networks Incorporated
 and its suppliers and may be covered by U.S. and Foreign Patents,
 patents in process, and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from ShieldX Networks Incorporated.
 */

(function() {
    function malwarePolicyCtrl(
        $scope,
        $state,
        $translate,
        $sessionStorage,
        policyService,
        $timeout,
        $q,
        $mdDialog,
        infrastructureConnectorService,
        userSessionMenagment
    ) {
        var deferred = $q.defer();
        $scope.promise = deferred.promise;
        $scope.promiseCompleted = true;
        $scope.policyselected = [];
        $scope.isSearchBarOpen = false;
        $scope.addNewPolicyArray = [];
        $scope.policyname = "";
        $scope.query = {
            order: 'name',
            limit: 10,
            page: 1
        };
        var update_id = authorities("policy_update");
        $scope.is_update_policy = userSessionMenagment.isUserAllowd(update_id);
        
        $scope.policyListPromise = false;
        var newPolicyId = parseInt($state.params.newPolicy);
        var DuplicatedPolicy = $state.params.duplicated; 
        $scope.$emit('listenHeaderText', { headerText: "Policy" });
        $scope.$on('saveUpdateNewPolicy', function(event, arg) {
            //var tempfalg = true;
            if ($scope.addNewPolicyArray.length > 0) {
                var temp = _.find($scope.addNewPolicyArray, arg.data);
                if (temp === undefined) {
                    $scope.addNewPolicyArray.push(arg.data);
                }
            } else {
                $scope.addNewPolicyArray.push(arg.data);
            }
                $scope.saveupdatepolicyAdd = false;
        });
        $scope.tenantsList = [];
        policyService.getTotalTenats().then(function(data){
            $scope.tenantsList = data;
            $scope.tenantsListCompleted = true;
            renderData();
        },function(err){
            console.log("unable to fetch tenants");
            $scope.tenantsListCompleted = true;
            renderData();
        });
        policyService.getListOfPoliciesDetails("malwarepolicy", "policy", "").then(function(data) {
           /* _.each(data,function(item){
                var d = new Date(item.lastModified);
                item.modifiedDate = d.getDate() + '/' + (d.getMonth()+1) + '/' + d.getFullYear();
            });*/
            $scope.policyData = data;
            $scope.policyListPromise = true;
            renderData();
            deferred.resolve();
        }, function(err) {
            console.log("malware policy error data");
            deferred.reject();
            $scope.policyListPromise = true;
            $scope.policyData = '';
            renderData();
        });

        function renderData(){
            if($scope.tenantsListCompleted &&  $scope.policyListPromise){
                $scope.promiseCompleted = false;
                $scope.malwarePolicyData = [];
                _.each($scope.tenantsList, function(value) {
                    for (var i = 0; i < $scope.policyData.length; i++) {
                        if ($scope.policyData[i].tenantId === value.id) {
                            $scope.policyData[i].tenantName = value.name;
                        }
                    }
                });
                 if (newPolicyId) {
                        _.each($scope.policyData, function(value, key) {
                            if (value.id === newPolicyId) {
                               if(DuplicatedPolicy !== ''){
                                    value.duplicatedPolicy = true;
                                }else{
                                    value.newPolicy = true;    
                                }
                                $scope.malwarePolicyData.unshift(value);
                            } else {
                                $scope.malwarePolicyData.push(value);
                            }
                        });
                    } else {
                        $scope.malwarePolicyData = $scope.policyData;
                    }
            }
        }
        $scope.deleteMalwarePolicy = function(data) {
            toastparam = {
                'heading': 'Malware Policy delete inprogress',
                'subHeading': 'Malware Policy delete Intiated with name ' + data.name,
                'type': 'progress',
                'timeout': 15000
            };
            showToast(toastparam);
            policyService.deletePolicyBasedOnID("policy/malwarepolicy", data.id).then(function(res) {
                toastparam = {
                    'heading': 'Malware Policy deleted  Successfully',
                    'subHeading': 'Malware Policy  deleted with name ' + data.name,
                    'type': 'success',
                    'timeout': 5000
                };
                showToast(toastparam);
            }, function(err) {
                toastparam = {
                    'heading': 'Malware Policy delete  failed',
                    'subHeading': 'Malware Policy delete failed with error ' + err.message,
                    'type': 'fail',
                    'timeout': 5000
                };
                showToast(toastparam);
            }).finally(function(){
                $state.reload();    
            });
        };


        $scope.sampleFileactions = [{
            "alertingThreshold": "",
            "blackListingThreshold": "",
            "blockingThreshold": "",
            "fileType": "PDF",
            "id": 0,
            "sendToFireEyeEngine": false,
            "sendToWBList": false
        }, {
            "alertingThreshold": "",
            "blackListingThreshold": "",
            "blockingThreshold": "",
            "fileType": "EXE",
            "id": 1,
            "sendToFireEyeEngine": false,
            "sendToWBList": false
        }, {
            "alertingThreshold": "",
            "blackListingThreshold": "",
            "blockingThreshold": "",
            "fileType": "MSOFFICE",
            "id": 2,
            "sendToFireEyeEngine": false,
            "sendToWBList": false
        }, {
            "alertingThreshold": "",
            "blackListingThreshold": "",
            "blockingThreshold": "",
            "fileType": "COMPRESSED",
            "id": 3,
            "sendToFireEyeEngine": false,
            "sendToWBList": false
        }, {
            "alertingThreshold": "",
            "blackListingThreshold": "",
            "blockingThreshold": "",
            "fileType": "JAR",
            "id": 4,
            "sendToFireEyeEngine": false,
            "sendToWBList": false
        }];
        $scope.showAssignmentCountPopUp = function(event,policyName){
            $scope.assignmentPolicyName = policyName;
            $mdDialog.show({
                skipHide: true,
                controller: assignmentCountCtrl,
                bindToController: true,
                preserveScope: true,
                templateUrl: 'core/components/administration/policy/res-group-list.html',
                parent: angular.element(document.body),
                targetEvent: event,
                fullscreen: true,
                scope: $scope,
                openFrom: { top: 1100, height: 0 },
                closeTo: { left: 1500 }
            }).then(function() {

            });
        };
        function assignmentCountCtrl(){
            $scope.isAGSearchBarOpen = false;
             $scope.cancelassignmentControlDialogue = function() {
                    $mdDialog.cancel();
                    //$state.reload();
             };
             $scope.toggleSearchBarAsignment = function(event) {
                $scope.isAGSearchBarOpen = $scope.isAGSearchBarOpen === false ? true : false;
                if ($scope.isAGSearchBarOpen)
                    angular.element(event.currentTarget.firstElementChild).css('color', '#4a90e2');
                else
                    angular.element(event.currentTarget.firstElementChild).css('color', '#6d6e71');
            };
        }
        $scope.callpopupToAddNew = function(eve) {
            $scope.saveupdatepolicyAdd = true;
            $scope.tenantselected = false;
            $scope.selectedTenantsValue = '';
            $scope.tenantSelected = false;
            $scope.fileactionsData = angular.copy($scope.sampleFileactions);
            $scope.policyname = '';
            $mdDialog.show({
                skipHide: true,
                controller: policyListTypeCtr,
                bindToController: true,
                preserveScope: true,
                templateUrl: 'core/components/administration/policy/malware/new-mal-policy.html',
                parent: angular.element(document.body),
                targetEvent: eve,
                fullscreen: true,
                scope: $scope,
                openFrom: { top: 1100, height: 0 },
                closeTo: { left: 1500 }
            }).then(function() {

            });
        };

        function policyListTypeCtr($rootScope, $scope, $mdDialog) {
            (function() {
                $scope.cancelNewPolicyDialogue = function() {
                    $mdDialog.hide();
                    //$state.reload();
                };
                $scope.callUpdatePolicyData = function(data) {
                    //console.log($scope.addNewPolicyArray);
                    var objData = {};
                    objData.fileActions = $scope.addNewPolicyArray;
                    objData.id = 0;
                    objData.name = $scope.policyname;
                    objData.protocolNames = [];
                    var date = new Date();
                    objData.lastModified = date.getTime();
                    objData.tenantId = $scope.selectedTenantObj.id;
                    var path = "policy/malwarepolicy";
                    $mdDialog.cancel();
                    toastparam = {
                        'heading': 'Malware Policy update inprogress',
                        'subHeading': 'Malware Policy creation Intiated with name ' + objData.name,
                        'type': 'progress',
                        'timeout': 15000
                    };
                    showToast(toastparam);
                    policyService.updateMalwarePolicyData(path, objData).then(function(data) {
                        $scope.newMalwarePolicyCreated = data;
                        toastparam = {
                            'heading': 'Malware Policy updated Successfully',
                            'subHeading': 'New Malware Policy Created with name ' + objData.name,
                            'type': 'success',
                            'timeout': 5000
                        };
                        showToast(toastparam);

                    }, function(err) {
                        toastparam = {
                            'heading': 'Malware Policy update  failed',
                            'subHeading': 'Malware Policy ' + err.message,
                            'type': 'fail',
                            'timeout': 5000
                        };
                        showToast(toastparam);
                        //concole.log(data);
                    }).finally(function() {
                        //$mdDialog.cancel();
                        $state.go('home.policy.policylist.malware', { 'newPolicy': $scope.newMalwarePolicyCreated });
                    });
                };

                $scope.callpopupTenats = function(event) {
                    $mdDialog.show({
                        skipHide: true,
                        preserveScope: true,
                        controller: tenantListCtr,
                        bindToController: true,
                        templateUrl: 'core/components/administration/policy/tenants.html',
                        parent: angular.element(document.body),
                        targetEvent: event,
                        fullscreen: false,
                        scope: $scope,
                        openFrom: { top: 1100, height: 0 },
                        closeTo: { left: 1500 }
                    }).then(function() {

                    });
                };

                function tenantListCtr($scope, $mdDialog, policyService) {
                     //$scope.tenantselected = false;
                    $scope.canceltenantDialogue = function() {
                        //tenantSelection();
                        $mdDialog.cancel();
                    };
                    $scope.tenants = $scope.tenantsList;
                    $scope.onSelectTenantChanged = function() {
                        console.log(" onSelectionChanged >> ");
                        $scope.tenantSelected = true;
                    };
                    $scope.tenantdone = function(value) {
                        $scope.tenantselected = true;
                        $scope.selectedTenantObj = JSON.parse(value);
                        $mdDialog.hide();
                    };
                }
            })();
        }

        $scope.callpopupDuplicatePolicy = function(data) {
                var copyData = angular.copy(data);
                    copyData.id = 0;
                    copyData.name = copyData.name + ' copy';
                _.each(copyData.fileActions,function(val){
                        val.id = 0;
                    });
                var date = new Date();
                copyData.lastModified = date.getTime();
                var path = "policy/malwarepolicy";
                toastparam = {
                    'heading': 'Malware Policy creation in progress',
                    'subHeading': 'Malware Policy creation intiated with name ' + copyData.name,
                    'type': 'progress',
                    'timeout': 15000
                };
                showToast(toastparam);
                policyService.updateMalwarePolicyData(path, copyData).then(function(data) {
                    $scope.newMalwarePolicyCreated = data;
                    toastparam = {
                        'heading': 'Malware Policy created successfully',
                        'subHeading': 'New Malware Policy created with name ' + copyData.name,
                        'type': 'success',
                        'timeout': 5000
                    };
                    showToast(toastparam);

                }, function(err) {
                    toastparam = {
                        'heading': 'Malware Policy creation failed',
                        'subHeading': 'Malware Policy ' + err.message,
                        'type': 'fail',
                        'timeout': 5000
                    };
                    showToast(toastparam);

                 }).finally(function() {
                    $state.go('home.policy.policylist.malware', { 'newPolicy': $scope.newMalwarePolicyCreated,'duplicated':'d' });
                });
       };
       $scope.toggleSearchBar = function(event) {
            $scope.isSearchBarOpen = $scope.isSearchBarOpen === false ? true : false;
            if ($scope.isSearchBarOpen)
                angular.element(event.currentTarget.firstElementChild).css('color', '#4a90e2');
            else
                angular.element(event.currentTarget.firstElementChild).css('color', '#6d6e71');
        };

    }

    angular.module('shieldxApp').controller('malwarePolicyCtr', malwarePolicyCtrl);
})();
