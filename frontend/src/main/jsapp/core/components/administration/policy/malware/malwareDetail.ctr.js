/*
 ShieldX Networks Inc. CONFIDENTIAL
 ----------------------------------
 *
 Copyright (c) 2016 ShieldX Networks Inc.
 All Rights Reserved.
 *
 NOTICE: All information contained herein is, and remains
 the property of ShieldX Networks Incorporated and its suppliers,
 if any. The intellectual and technical concepts contained
 herein are proprietary to ShieldX Networks Incorporated
 and its suppliers and may be covered by U.S. and Foreign Patents,
 patents in process, and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from ShieldX Networks Incorporated.
 */

(function() {
    function malwarePolicyDetailCtrl(
        $scope,
        $state,
        $sessionStorage,
        policyService,
        $timeout,
        $q,
        $mdDialog,
        infrastructureConnectorService,
        userSessionMenagment
    ) {

        var initializing = true;
        var paramId = parseInt($state.params.policyId);
        $scope.$emit('listenHeaderText', { headerText: "Policy" });
        $scope.editcontainer = true;
        $scope.tenantSelected = false;
        $scope.tenantsListCompleted = false;
        $scope.policyListPromise = false;
        $scope.selectedTenantsValue = '';
        $scope.sampleFileactions = [{
            "alertingThreshold": "",
            "blackListingThreshold": "",
            "blockingThreshold": "",
            "fileType": "PDF",
            "id": 0,
            "sendToFireEyeEngine": false,
            "sendToWBList": false
        }, {
            "alertingThreshold": "",
            "blackListingThreshold": "",
            "blockingThreshold": "",
            "fileType": "EXE",
            "id": 1,
            "sendToFireEyeEngine": false,
            "sendToWBList": false
        }, {
            "alertingThreshold": "",
            "blackListingThreshold": "",
            "blockingThreshold": "",
            "fileType": "MSOFFICE",
            "id": 2,
            "sendToFireEyeEngine": false,
            "sendToWBList": false
        }, {
            "alertingThreshold": "",
            "blackListingThreshold": "",
            "blockingThreshold": "",
            "fileType": "COMPRESSED",
            "id": 3,
            "sendToFireEyeEngine": false,
            "sendToWBList": false
        }, {
            "alertingThreshold": "",
            "blackListingThreshold": "",
            "blockingThreshold": "",
            "fileType": "JAR",
            "id": 4,
            "sendToFireEyeEngine": false,
            "sendToWBList": false
        }];

        var update_id = authorities("policy_update");
        $scope.is_update_policy = userSessionMenagment.isUserAllowd(update_id);
        $scope.tenantsList = [];
       policyService.getTotalTenats().then(function(data){
            $scope.tenantsListCompleted = true;
            $scope.tenantsList = data;
            renderData();
        },function(err){
            console.log("unable to fetch tenants");
            $scope.tenantsListCompleted = true;
            renderData();
        });
        policyService.getPolicyDetail("malwarepolicy", "policy", paramId).then(function(res) {
            _.each(res.fileActions, function(val) {
                        for (var i = 0; i < $scope.sampleFileactions.length; i++) {
                            if ($scope.sampleFileactions[i].fileType === val.fileType) {
                                $scope.sampleFileactions[i] = val;
                            }
                        }
            });
            res.fileActions = $scope.sampleFileactions;
            /*var d = new Date(res.lastModified);
            res.modifiedDate =  d.getDate() + '/' + (d.getMonth()+1) + '/' + d.getFullYear();*/
            console.log("fetched Data Successfully in malwarepolicy");
            $scope.policyListPromise = true;
            $scope.policyData = res;
            renderData();
        }, function(err) {
            console.log("getting Malware policy details failes with" + err);
            $scope.policyListPromise = true;
            $scope.policyData = '';
            renderData();
        });
        function renderData(){
            if($scope.policyListPromise && $scope.tenantsListCompleted){
                _.each($scope.tenantsList, function(value) {
                        if (value.id === $scope.policyData.tenantId) {
                            $scope.TenantFromAPI = value;
                        }
                });
                $scope.malwarePolicyBasedId = $scope.policyData;
                if($scope.TenantFromAPI){
                    $scope.malwarePolicyBasedId.tenantName = $scope.TenantFromAPI.name;    
                    $scope.selectedTenantsValue = JSON.stringify($scope.TenantFromAPI); 
                    $scope.tenantSelected = true;
                }
            }
        }
        $scope.callUpdatePolicyData = function(data) {
            console.log("clicked on update malware policy");
            var postdata = angular.copy(data.fileActions);
            if($scope.selectedTenantObj){
                data.tenantId = $scope.selectedTenantObj.id;    
            }
            var validata = [];
            _.each(postdata, function(value, key) {
                if (value.blockingThreshold !== "" && value.alertingThreshold !== "" && value.blackListingThreshold !== "") {
                    validata.push(value);
                }
            });
            var date = new Date();
            data.lastModified = date.getTime();
            data.fileActions = validata;
            // objData.tenantId = $scope.selectedTenantObj.id;
            var path = "policy/malwarepolicy";
            toastparam = {
                'heading': 'Malware Policy update inprogress',
                'subHeading': 'Malware Policy update Intiated with name ' + data.name,
                'type': 'progress',
                'timeout': 15000
            };
            showToast(toastparam);
            policyService.updateExistingPolicyData(path, data).then(function(res) {
                // console.log(data);
                toastparam = {
                    'heading': 'Malware Policy updated Successfully',
                    'subHeading': 'Malware Policy updated with name ' + data.name,
                    'type': 'success',
                    'timeout': 5000
                };
                showToast(toastparam);

            }, function(err) {
                toastparam = {
                    'heading': 'Malware Policy update  failed',
                    'subHeading': 'Malware Policy update failed with' + err.message,
                    'type': 'fail',
                    'timeout': 5000
                };
                showToast(toastparam);
                //concole.log(data);
            }).finally(function() {
                $state.reload();
            });
        };
        $scope.editTenant = function(event) {
            $mdDialog.show({
                skipHide: true,
                preserveScope: true,
                controller: tenantListCtr,
                bindToController: true,
                templateUrl: 'core/components/administration/policy/tenants.html',
                parent: angular.element(document.body),
                targetEvent: event,
                fullscreen: false,
                scope: $scope,
                openFrom: { top: 1100, height: 0 },
                closeTo: { left: 1500 }
            }).then(function() {

            });
        };

        function tenantListCtr($scope, $mdDialog, policyService) {
            //$scope.tenantselected = false;
           
            $scope.canceltenantDialogue = function() {
                $mdDialog.cancel();
            };
        
            $scope.tenants = $scope.tenantsList;
            $scope.onSelectTenantChanged = function() {
                console.log(" onSelectionChanged >> ");
                $scope.tenantSelected = true;
            };
            $scope.tenantdone = function(value) {
                $scope.tenantselected = true;
                $scope.selectedTenantObj = JSON.parse(value);
                $scope.detailsForm.$dirty = true;
                $mdDialog.hide();
            };
        }
        $scope.$on('$viewContentLoaded', function(event){ 
            console.log(event);
            fixContainerHeight(1);
        });
    }

    angular.module('shieldxApp').controller('malwarePolicyDetailCtr', malwarePolicyDetailCtrl);
})();
